;; customisations to the general emacs environment itself

(if (require-if-exists 'package) 
    (add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))
  )

(require-if-exists 'package)
;; Package management with Marmalade
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/"))

;; stop confirmation required for opening largish files.
(setq large-file-warning-threshold nil)
;; Set winner mode on, to track window configs if needed
(winner-mode 1)

;; Make all "yes or no" prompts show "y or n" instead
(fset 'yes-or-no-p 'y-or-n-p)

;; Remove toolbar
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))

;; Hippie Expansion stuff. Set hippie-expansion to C-tab
;;(require-if-exists 'hippie-exp)
(global-set-key (kbd "C-<tab>") 'hippie-expand)
;; Add python completion to avoid altering hippie-exp.el itself.
;;(add-to-list 'hippie-expand-try-functions-list 'try-complete-py-complete-symbol)

;; Syntax highlighting on:
(global-font-lock-mode 1)
(defconst font-lock-maximum-decoration t)

;; - Icicles
;; (add-to-list 'load-path "~/emacs/lisp/addons/icicles")
;; Icicles Stuff:
;;(require-if-exists 'icicles)
;; Add the current line number to the mode bar
(line-number-mode t)
 
;; Add the current column number to the mode bar
(column-number-mode t)

;; Enable highlighting when marking a region
(setq transient-mark-mode t)

(global-set-key "\C-cl" 'goto-line)
(global-set-key "\C-Z" 'undo)

;; Reload .emacs file by typing: Mx reload.
(defun reload () "Reloads .emacs interactively."
  (interactive)
  (load "~/.emacs"))

(display-time-mode t)
(setq display-time-24hr-format t)

;;http://www.emacsblog.org/2007/04/09/highlight-the-current-line/
(global-hl-line-mode 0)
;; To customize the background color
(set-face-background 'hl-line "#040")  ;; Emacs 22 Only

;; find file at point
(ffap-bindings)

;; enable ido-mode
(ido-mode 1)


;; Window navigation
(when (fboundp 'windmove-default-keybindings)
      (windmove-default-keybindings))
;; Emacs server support
(server-start)


;; Bind f3 to repeat our last keyboard macro
(global-set-key [f3] 'call-last-kbd-macro)

;; Make various default-unavailable commands permanently available
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'narrow-to-region 'disabled nil)

;; Disable insert key on keyboard
(global-set-key (quote [insert]) nil)

;; Bindings for replace string and replace regex
(global-set-key "\C-crs" 'replace-string)
(global-set-key "\C-crr" 'replace-regexp)
;; Binding to delete-region
(global-set-key "\C-cd" 'delete-region)

(defun ridm () 
  "Remove intrusive CTRL-Ms from the buffer" 
  (interactive) 
  (save-excursion 
    (goto-char (point-min)) 
    (replace-string "\C-m\C-j" "\C-j")))


;; Resize to 3/4 - 1/4 instead of 1/2-1/2
(defun three-quarters-window () 
  "Resizes current window big"
  (interactive)
  (let ((size (- (truncate (* .75 (frame-height))) (window-height)))) 
    (if (> size 0) 
        (enlarge-window size)))) 
(global-set-key "\C-x7" 'three-quarters-window)

;; Toggle window dedication
(defun toggle-window-dedicated ()
"Toggle whether the current active window is dedicated or not"
(interactive)
(message
(if (let (window (get-buffer-window (current-buffer)))
   (set-window-dedicated-p window 
        (not (window-dedicated-p window))))
"Window '%s' is dedicated"
"Window '%s' is normal")
(current-buffer)))

(global-set-key [pause] 'toggle-window-dedicated)

(if (require-if-exists 'browse-kill-ring)
    (browse-kill-ring-default-keybindings))

;; Advise killing function to operate on current line if nothing is selected
(defadvice kill-ring-save (before slick-copy activate compile) "When called
  interactively with no active region, copy a single line instead."
  (interactive (if mark-active (list (region-beginning) (region-end)) (message
  "Copied line") (list (line-beginning-position) (line-beginning-position
  2)))))

(defadvice kill-region (before slick-cut activate compile)
  "When called interactively with no active region, kill a single line instead."
  (interactive
    (if mark-active (list (region-beginning) (region-end))
      (list (line-beginning-position)
        (line-beginning-position 2)))))

(defun dont-kill-emacs ()
  "Print a message when the shortcut to kill emacs is pressed, listing the command to run instead"
  (interactive)
  (error (substitute-command-keys "To exit emacs: \\[kill-emacs]")))
  
(global-set-key "\C-x\C-c" 'dont-kill-emacs)

(defun set-font ()
(interactive)
;; Set font for X or win32 systems, leaving unchanged otherwise
(if (equal window-system 'x)
    (set-frame-font "-adobe-courier-medium-r-normal--12-120-75-75-m-70-iso8859-1" t))
(if (equal window-system 'w32)
    (set-frame-font "-outline-Lucida Console-normal-r-normal-normal-13-97-96-96-c-*-iso8859-1" t)))
(add-hook 'term-setup-hook 'set-font)

;; uniquify buffer names
(if (require-if-exists 'uniquify) 
    (progn
    (setq 
     uniquify-buffer-name-style 'post-forward
     uniquify-strip-common-suffix nil)
  (setq uniquify-after-kill-buffer-p t) ; rename after killing uniquified
  (setq uniquify-ignore-buffers-re "^\\*") ; don't muck with special
                                        ; buffers (or Gnus mail
                                        ; buffers)
  ))

;; Unbind the suspend-frame key to prevent accidental emacs suspension
(global-unset-key "\C-x\C-z")

; An unfill region command
(defun unfill-region (begin end)
  "Remove all linebreaks in a region but leave paragraphs, 
  indented text (quotes,code) and lines starting with an asterix (lists) intact."
  (interactive "r")
  (replace-regexp "\\([^\n]\\)\n\\([^ *\n]\\)" "\\1 \\2" nil begin end))

(require-if-exists 'hide-lines)

(setq apropos-do-all t)
(setq confirm-nonexistent-file-or-buffer nil)

;;Add a function to evaluate sexp's in place and provide the result. From emacs.wordpress.com
;;bound to C-c e - which was unused
(defun fc-eval-and-replace ()
  "Replace the preceding sexp with its value."
  (interactive)
  (backward-kill-sexp)
  (condition-case nil
      (prin1 (eval (read (current-kill 0)))
             (current-buffer))
    (error (message "Invalid expression")
           (insert (current-kill 0)))))

(global-set-key (kbd "C-c e") 'fc-eval-and-replace)

;; A function to be used progromatically to replace all occurences of OLD in a supplied string with NEW
(defun replace-in-string (strmatch old new)
(while (string-match old strmatch)
  (setq strmatch (replace-match new t t strmatch)))
strmatch)

;; Add regex-IDE
(load "regex-tool.el" t)

;; Bring in extra-edit stuff
(require-if-exists 'extraedit)
(require-if-exists 'htmlize)

;; yasnippet
(require-if-exists 'yasnippet "yasnippet/")
(yas/initialize)
(setq yas/root-directory '("~/emacs/lisp/addons/kvw_yasnippets"
                           "~/emacs/lisp/addons/yasnippet/snippets/"))
(mapc 'yas/load-directory yas/root-directory)

;; only show battery mode if the system name reflects the term "laptop"
(if (string-match ".*?-laptop.*" system-name)
    (display-battery-mode t)
  (display-battery-mode nil))

  ;; Color Theme
  (if (require-if-exists 'color-theme "color-theme/")
      (progn
        (color-theme-initialize)
        ;; (if (require-if-exists 'color-theme-solarized "solarized/emacs-colors-solarized/")
        ;;     (color-theme-solarized-dark)
        ;; (color-theme-dark-laptop))
        (color-theme-dark-laptop)
        ))


(set-font)
(put 'set-goal-column 'disabled nil)

;; Ignore uninteresting files in tab completion when finding files to visit in buffers.
;; Via http://stackoverflow.com/questions/1731634/dont-show-uninteresting-files-in-emacs-completion-window/1732081#1732081
;; (defadvice completion--file-name-table (after 
;;                                         ignoring-backups-f-n-completion 
;;                                         activate)
;;   "filter out results when the have completion-ignored-extensions"
;;   (let ((res ad-return-value))
;; (if (and (listp res)
;; 	 (stringp (car res))
;; 	 (cdr res))                 ; length > 1, don't ignore sole match
;;     (setq ad-return-value
;;               (completion-pcm--filename-try-filter res)))))

(defun os-aware-buffer-file-name () 
  " Return a string with the current buffer-file-name, with path
seperators appropriate to the current OS"
  (setq fn (buffer-file-name))
  (if (equal window-system 'w32)
      (replace-in-string fn "/" "\\")
    fn)
)

;; Disable pinging of files that look like URL's
(setq ffap-machine-p-known "reject")

;; Auto refresh buffers
(global-auto-revert-mode 1)

;; Also auto refresh dired, but be quiet about it
(setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)

(require-if-exists 'table)

;; Reverse a string, as per http://wikemacs.org/wiki/Emacs_Lisp_Cookbook
(defun reverse-string-in-region (begin end)
(interactive "r")
(setq str (concat (reverse (string-to-list (buffer-substring begin end)))))
(message str)
(kill-region begin end)
(insert str)
)

;; for smooth scrolling and disabling the automatical recentering of emacs when moving the cursor
;; as per http://zhangda.wordpress.com/2009/05/21/customize-emacs-automatic-scrolling-and-stop-the-cursor-from-jumping-around-as-i-move-it/
;; (setq scroll-margin 1
;; scroll-conservatively 0
;; scroll-up-aggressively 0.01
;; scroll-down-aggressively 0.01)

;; http://www.emacswiki.org/emacs/SmoothScrolling
;; and http://compgroups.net/comp.emacs/cursor-jumps-to-center-while-scrolling/226347
(setq scroll-step 1)
(setq scroll-conservatively 9999)
;; (setq auto-window-vscroll nil)
(setq next-line-add-newlines nil)
;; 
(setq scroll-preserve-screen-position 1)

(setq undo-outer-limit 200000000)
(provide 'de_emacs_env)

